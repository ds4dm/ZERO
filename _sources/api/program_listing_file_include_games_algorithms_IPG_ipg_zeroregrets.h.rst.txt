
.. _program_listing_file_include_games_algorithms_IPG_ipg_zeroregrets.h:

Program Listing for File ipg_zeroregrets.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_games_algorithms_IPG_ipg_zeroregrets.h>` (``include/games/algorithms/IPG/ipg_zeroregrets.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /* #############################################
    *             This file is part of
    *                    ZERO
    *
    *             Copyright (c) 2020
    *     Released under the Creative Commons
    *         CC BY-NC-SA 4.0 License
    *
    *              Find out more at
    *        https://github.com/ds4dm/ZERO
    * #############################################*/
   
   #pragma once
   
   #include "zero.h"
   #include <armadillo>
   #include <gurobi_c++.h>
   #include <include/OsiGrbSolverInterface.hpp>
   #include <iostream>
   #include <memory>
   #include <set>
   #include <string>
   
   
   namespace Algorithms::IPG {
   
     class ZERORegrets : public Algorithm {
     private:
        std::unique_ptr<GRBModel> JointProgram = {}; 
        std::vector<std::pair<std::string, int>> Cuts;  
        std::vector<arma::vec>                   xLast; 
        GRBVar                                 **x{};
        GRBVar                                  *p{};
        double objLast = +GRB_INFINITY; 
        void   initialize();
   
        bool addEquilibriumInequality(unsigned int player, const arma::vec &xOfI);
   
        bool checkTime(double &remaining) const;
   
        ZEROStatus equilibriumMIP(double localTimeLimit);
   
     public:
        friend class Game::IPG;
   
        ZERORegrets(GRBEnv *env, Game::IPG *IPGObj) : Algorithm(env, IPGObj){};
   
        void solve();
   
        bool isSolved() const { return this->Solved; };
        bool isPureStrategy() const { return true; };
     };
   } // namespace Algorithms::IPG
