
.. _program_listing_file_include_mathopt_mp_param_ip_param.h:

Program Listing for File ip_param.h
===================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_mathopt_mp_param_ip_param.h>` (``include/mathopt/mp_param/ip_param.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: none

   /* #############################################
    *             This file is part of
    *                    ZERO
    *
    *             Copyright (c) 2020
    *     Released under the Creative Commons
    *        Zero v1.0 Universal License
    *
    *              Find out more at
    *        https://github.com/ds4dm/ZERO
    * #############################################*/
   
   
   #pragma once
   
   #include "support/codes.h"
   #include "zero.h"
   #include <armadillo>
   #include <gurobi_c++.h>
   #include <iostream>
   #include <memory>
   #include <set>
   #include <string>
   
   namespace MathOpt {
   
   
     std::ostream &operator<<(std::ostream &os, const IP_Param &I);
   
     class IP_Param : public MP_Param {
     private:
        GRBModel  IPModel;     
        arma::vec Integers;    
        bool Finalized{false}; 
   
        // These methods should be inaccessible to the inheritor, since we have a
        // different structure.
        using MP_Param::set;
   
     public: // Constructors
        explicit IP_Param(GRBEnv *env = nullptr) : MP_Param(env), IPModel{(*env)} { this->size(); }
   
        explicit IP_Param(arma::sp_mat C,
                                arma::sp_mat B,
                                arma::vec    b,
                                arma::vec    c,
                                arma::vec    _integers,
                                GRBEnv *     env = nullptr);
        ;
   
        arma::vec getIntegers() const {
           return this->Integers;
        } 
   
        bool finalize() override;
   
        bool addConstraint(arma::vec Ain, double bin, bool checkDuplicate = true, double tol = 1e-5);
   
        IP_Param(const IP_Param &ipg) = default;
   
        // Override setters
        IP_Param &set(const arma::sp_mat &C,
                           const arma::sp_mat &B,
                           const arma::vec &   b,
                           const arma::vec &   c,
                           const arma::vec &   integers); // Copy data into this
        IP_Param &set(arma::sp_mat &&C,
                           arma::sp_mat &&B,
                           arma::vec &&   b,
                           arma::vec &&   c,
                           arma::vec &&   integers); // Copy data into this
   
        IP_Param &
        set(const QP_Objective &obj, const QP_Constraints &cons, const arma::vec &integers = {});
   
   
        IP_Param &set(QP_Objective &&obj, QP_Constraints &&cons, arma::vec &&integers = {});
   
        bool operator==(const IP_Param &IPG2) const;
   
        double computeObjective(const arma::vec &y,
                                        const arma::vec &x,
                                        bool             checkFeas = true,
                                        double           tol       = 1e-6) const override;
   
        void save(const std::string &filename, bool append) const override;
        long load(const std::string &filename, long pos = 0) override;
   
        void updateModelObjective(arma::vec x);
   
        std::unique_ptr<GRBModel> solveFixed(arma::vec x, bool solve = false) override;
   
        std::unique_ptr<GRBModel> getIPModel(arma::vec x, bool relax = false);
   
        unsigned int KKT(arma::sp_mat &M, arma::sp_mat &N, arma::vec &q) const override;
   
   
        bool isFeasible(const arma::vec &y, const arma::vec &x, double tol) const override;
     };
   } // namespace MathOpt
